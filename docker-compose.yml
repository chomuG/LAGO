services:

  timescaledb:
    image: timescale/timescaledb-ha:pg14-latest
    container_name: timescaledb
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/home/postgres/pgdata/data          # ⬅️ 이 이미지의 실제 데이터 경로
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/home/postgres/pgdata/data  # ⬅️ 여기에 마운트해야 영속화됨
      - ./initdb:/docker-entrypoint-initdb.d:ro   # (선택) 최초 1회만 사용하고 빼두기
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB} || exit 1"]
      interval: 5s
      timeout: 3s
      retries: 30

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    restart: unless-stopped

  finbert-service:
    build:
      context: ./finbert
      dockerfile: Dockerfile
    container_name: finbert-service
    ports:
      - "8000:8000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=false
    volumes:
      - ./finbert:/app
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s  # FinBERT 모델 로딩 시간 고려

  backend:
    build:
      context: ./BE
      dockerfile: Dockerfile
    container_name: spring-backend
    ports:
      - "8081:9000"
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=${SPRING_REDIS_PORT:-6379}
      - REDIS_STREAM_KEY=${REDIS_STREAM_KEY:-orders-stream}
      - FINBERT_URL=http://finbert-service:8000
    depends_on:
      timescaledb:
        condition: service_healthy
      redis:
        condition: service_started
      finbert-service:
        condition: service_healthy
    restart: unless-stopped

volumes:
  jenkins_home:
  timescale_data:
