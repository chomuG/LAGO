services:
  jenkins:
    build: .
    container_name: jenkins
    restart: unless-stopped
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins_home:/var/jenkins_home
      - /var/run/docker.sock:/var/run/docker.sock
    group_add:
      - "${DOCKER_GID:-999}"  # Docker 그룹 ID
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=true

  timescaledb:
    image: timescale/timescaledb-ha:pg14-latest
    container_name: timescaledb
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: redis:7.2
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - ./redisdata:/data
    restart: unless-stopped

  backend:
    build:
      context: ./BE
      dockerfile: Dockerfile
    container_name: spring-backend
    ports:
      - "8081:8080"  # EC2에서는 8081 포트로 접근 (Jenkins는 8080 사용)
    env_file:
      - .env
    environment:
      - SPRING_PROFILES_ACTIVE=${SPRING_PROFILES_ACTIVE}
      - SPRING_DATASOURCE_URL=${SPRING_DATASOURCE_URL}
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USER}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PASSWORD}
      - SPRING_REDIS_HOST=redis
      - SPRING_REDIS_PORT=6379
    depends_on:
      - timescaledb
      - redis
    restart: unless-stopped

volumes:
  jenkins_home:
  timescale_data:

 
