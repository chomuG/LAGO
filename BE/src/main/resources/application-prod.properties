# =================================================================
# 운영 환경 설정 (Profile: prod)
# Docker, CI/CD, EC2 운영 서버
# =================================================================

# 서버 포트
server.port=${SERVER_PORT:8080}

# =================================================================
# PostgreSQL Docker/EC2 (환경변수 사용) - 지침서 명세 준수
# =================================================================
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://timescaledb:5432/stock_db}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:ssafyuser}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:changeme}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA 설정 (운영용)
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:none}
spring.jpa.show-sql=${SPRING_JPA_SHOW_SQL:false}

# =================================================================
# Redis (운영용)
# =================================================================
spring.redis.host=${SPRING_REDIS_HOST:redis}
spring.redis.port=${SPRING_REDIS_PORT:6379}
spring.redis.password=${SPRING_REDIS_PASSWORD:}

# =================================================================
# 운영용 로깅
# =================================================================
logging.level.com.example.LAGO=${LOG_LEVEL:INFO}
logging.level.org.hibernate.SQL=WARN
logging.level.org.springframework=WARN

# =================================================================
# FinBERT 설정 (운영용)
# =================================================================
finbert.server.host=${FINBERT_SERVER_HOST:http://finbert:5000}
finbert.client.timeout=${FINBERT_CLIENT_TIMEOUT:15000}

# =================================================================
# 뉴스 API 설정 (운영용)
# =================================================================
# 네이버 뉴스 API
naver.api.client-id=${NAVER_CLIENT_ID:}
naver.api.client-secret=${NAVER_CLIENT_SECRET:}

# Claude API 
claude.api.key=${CLAUDE_API_KEY:}

# 뉴스 수집 스케줄러
app.news.scheduler.enabled=${NEWS_SCHEDULER_ENABLED:true}

# Redis Stream Consumer 설정
redis.stream.key=${REDIS_STREAM_KEY:krx_stream_key1}
redis.stream.consumer-group=${REDIS_STREAM_CONSUMER_GROUP:spring-candle-group}
redis.stream.consumer-name=consumer-${random.uuid}
redis.stream.read-timeout=${REDIS_STREAM_READ_TIMEOUT:1000}
redis.stream.batch-size=${REDIS_STREAM_BATCH_SIZE:10}

# Chart Analysis Service
services.chart-analysis.url=${CHART_ANALYSIS_URL:http://finbert:5000/detect-patterns}

# =================================================================
# 운영 보안 설정
# =================================================================
server.error.include-message=never
server.error.include-binding-errors=never
server.error.include-stacktrace=never
