# =================================================================
# LAGO 백엔드 공통 설정
# 모든 환경 공통 기본값 - Profile별 세부설정은 application-{profile}.properties
# =================================================================

# 애플리케이션 기본 정보
spring.application.name=LAGO
spring.profiles.active=dev

# =================================================================
# JPA/Hibernate 기본 설정 (DB Convention 준수)
# =================================================================
# 데이터베이스 설정은 profile별로 설정됨 (application-{profile}.properties)
# spring.datasource.url=jdbc:h2:mem:devdb
# spring.datasource.username=sa
# spring.datasource.password=
# spring.datasource.driver-class-name=org.h2.Driver

# H2 콘솔 활성화 (Profile별로 가양 설정)
# spring.h2.console.enabled=true
# spring.h2.console.path=/h2-console

# JPA/Hibernate 설정
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl
# DB별 dialect는 profile별 설정에서 결정
# spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
# spring.jpa.database-platform=org.hibernate.dialect.H2Dialect
# spring.jpa.show-sql=true

# 테스트 데이터 자동 로드 설정 (비활성화)
spring.jpa.defer-datasource-initialization=false
spring.sql.init.mode=never
spring.sql.init.data-locations=classpath:data.sql
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true

# =================================================================
# Security 비활성화 (개발 단계) 및 H2 자동설정 비활성화
# =================================================================
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration

# =================================================================
# Jackson JSON 설정
# =================================================================
spring.jackson.serialization.write-dates-as-timestamps=false
spring.jackson.serialization.write-durations-as-timestamps=false

# =================================================================
# Swagger API 문서화
# =================================================================
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs

# =================================================================
# FinBERT 감정 분석 공통 엔드포인트
# =================================================================
finbert.server.analyze-endpoint=/analyze
finbert.server.health-endpoint=/health

# =================================================================
# Redis Stream Consumer 설정 (기본값)
# =================================================================
redis.stream.key=krx_stream_key1
redis.stream.consumer-group=spring-candle-group
redis.stream.consumer-name=consumer-${random.uuid}
redis.stream.read-timeout=1000
redis.stream.batch-size=10

# =================================================================
# Chart Analysis Service
# =================================================================
services.chart-analysis.url=http://localhost:5000/detect-patterns

# =================================================================
# 뉴스 API 설정
# =================================================================
# 네이버 뉴스 API
naver.api.client-id=${NAVER_CLIENT_ID:}
naver.api.client-secret=${NAVER_CLIENT_SECRET:}

# Claude API 
claude.api.key=${CLAUDE_API_KEY:S13P11D203-c5ba35f0-48f1-4e2d-a711-8d000235564e}

# 뉴스 수집 스케줄러 활성화/비활성화
app.news.scheduler.enabled=${NEWS_SCHEDULER_ENABLED:true}

# =================================================================
# 데이터베이스 설정
# =================================================================
spring.datasource.url=jdbc:postgresql://timescaledb:5432/stock_db
spring.datasource.username=${POSTGRES_USER}
spring.datasource.password=${POSTGRES_PASSWORD}

# =================================================================
# Redis 설정은 profile별로 설정됨
# =================================================================
# spring.redis.host=localhost
# spring.redis.port=6379
# spring.redis.timeout=2000ms
