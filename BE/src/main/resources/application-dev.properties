# =================================================================
# 개발 환경 전용 설정 (Profile: dev)
# 지침서 명세: 환경변수/시크릿 분리, 테스트/운영 환경 분리
# =================================================================

# 서버 포트 설정 (개발용)
server.port=9000

# PostgreSQL 데이터베이스 연결 설정
spring.datasource.url=${POSTGRES_URL:jdbc:postgresql://i13d203.p.ssafy.io:5432/stock_db}
spring.datasource.username=${POSTGRES_USER:ssafyuser}
spring.datasource.password=${POSTGRES_PASSWORD:ssafypw!!}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate 설정 (개발용)
spring.jpa.hibernate.ddl-auto=none
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect

# PostgreSQL 소문자 테이블명 강제 설정
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyJpaCompliantImpl

# ===============================
# DB Connection Pool Setting
# ===============================
# To prevent "FATAL: sorry, too many clients already" errors, explicitly set the max pool size.
spring.datasource.hikari.maximum-pool-size=5

# Redis 설정 (개발용 - 비활성화)
# Redis 관련 자동설정 비활성화는 하단 Security 설정과 통합됨

# Redis 설정 (개발용)
spring.data.redis.host=${SPRING_REDIS_HOST:redis}
spring.data.redis.port=${SPRING_REDIS_PORT:6379}
spring.data.redis.timeout=3s
spring.data.redis.repositories.enabled=false

# 앱 커스텀 스트림 설정
spring.redis.stream.key=${REDIS_STREAM_KEY:orders-stream}
spring.redis.stream.read-timeout=1000
spring.redis.stream.batch-size=10

# 현재 이 컨슈머 그룹/이름
redis.stream.consumer-group=${REDIS_STREAM_CONSUMER_GROUP:lago_group}
redis.stream.consumer-name=${REDIS_STREAM_CONSUMER_NAME:lago_consumer}

# 로깅 설정 (상세 디버깅)
logging.level.com.example.LAGO=DEBUG
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE
logging.level.org.springframework.web=DEBUG

# Spring Security 비활성화 (개발용)
spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration

# Swagger UI 설정
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.enabled=true

# FinBERT 감정 분석 서버 설정 (개발용)
finbert.url=${FINBERT_URL:http://finbert-service:8000}
finbert.server.host=http://finbert-service:8000
finbert.server.analyze-endpoint=/analyze
finbert.server.health-endpoint=/health
finbert.client.timeout=30000

# 개발용 Mock 데이터 설정
app.mock.enable-sample-data=true
app.mock.ai-bot-count=4

# Virtual Thread 설정 (Java 21)
spring.threads.virtual.enabled=true

# 캐싱 설정 (개발용 - 간단한 설정)
spring.cache.type=simple

management.endpoints.web.exposure.include=health,info,mappings,beans
management.endpoint.health.show-details=always
management.endpoint.beans.enabled=true
management.endpoint.mappings.enabled=true

# 뉴스 수집 스케줄러 활성화
spring.task.scheduling.enabled=true

# 컴포넌트 스캔 디버그 로깅
logging.level.org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider=DEBUG

# OAuth2 설정 (개발용 - 임시 더미값)
oauth2.google.client-id=${GOOGLE_CLIENT_ID:dummy-client-id}
oauth2.google.client-secret=${GOOGLE_CLIENT_SECRET:dummy-client-secret}
oauth2.google.redirect-uri=${GOOGLE_REDIRECT_URI:http://localhost:9000/login/oauth2/code/google}

oauth2.kakao.client-id=${KAKAO_CLIENT_ID:dummy-client-id}
oauth2.kakao.client-secret=${KAKAO_CLIENT_SECRET:dummy-client-secret}
oauth2.kakao.redirect-uri=${KAKAO_REDIRECT_URI:http://localhost:9000/login/oauth2/code/kakao}
