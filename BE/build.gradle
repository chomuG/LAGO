plugins {
	id 'java'
	id 'org.springframework.boot' version '3.5.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	// implementation 'org.springframework.boot:spring-boot-starter-security'  // 개발 단계에서 임시 비활성화
	implementation 'org.springframework.boot:spring-boot-starter-web'
	
	// Swagger/OpenAPI 3.0 - Spring Boot 3.5.x 호환 최신 버전
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.0'
	
	// Validation
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	
	// 테스트 의존성
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// testImplementation 'org.springframework.security:spring-security-test'  // 개발 단계에서 임시 비활성화
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testRuntimeOnly 'com.h2database:h2'
}

tasks.named('test') {
	useJUnitPlatform()
}

// bootRun 태스크 설정 - main 환경의 application.properties 사용 강제
bootRun {
	// .env 파일 환경변수 로드
	doFirst {
		def envFile = file('../.env')
		if (envFile.exists()) {
			envFile.readLines().each { line ->
				if (line && !line.startsWith('#') && line.contains('=')) {
					def parts = line.split('=', 2)
					systemProperty(parts[0], parts[1])
				}
			}
		}
	}
	
	// main 환경 사용 명시
	systemProperty 'spring.profiles.active', 'default'
	systemProperty 'spring.config.location', 'classpath:application.properties'
}
